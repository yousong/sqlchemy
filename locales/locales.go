// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package locales

import (
	"golang.org/x/text/language"

	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

var Catalog catalog.Catalog

func init() {
	dict := map[string]catalog.Dictionary{
		"en_US": &dictionary{index: en_USIndex, data: en_USData},
		"zh_CN": &dictionary{index: zh_CNIndex, data: zh_CNData},
	}
	fallback := language.MustParse("en-US")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}

	Catalog = cat

}

var messageKeyToIndex = map[string]int{
	"Cannot find JSONDict key": 30,
	"Illformat":                31,
	"No data to update":        0,
	"NotSupportedError":        8,
	"TableNotExists":           9,
	"do not known how to deserialize json into this interface type": 26,
	"duplicate entry":                 1,
	"empty primary keys":              3,
	"empty query":                     2,
	"fail to insert object":           10,
	"input needs pointer input":       5,
	"input needs slice or array":      6,
	"invalid 4 byte rune":             23,
	"invalid char":                    21,
	"invalid hex":                     22,
	"key not found":                   17,
	"map key must be string":          27,
	"missing input field":             28,
	"nil input field":                 29,
	"not a valid JSONArray":           12,
	"not a valid JSONDict":            11,
	"not a valid boolean":             15,
	"not a valid float":               14,
	"not a valid number":              13,
	"not a valid string":              16,
	"out of index range":              20,
	"out of key range":                19,
	"read only input":                 7,
	"unexpected row count":            4,
	"unmarshal array length mismatch": 25,
	"unmarshal type mismatch":         24,
	"unsupported operation":           18,
}

var en_USIndex = []uint32{ // 33 elements
	// Entry 0 - 1F
	0x00000000, 0x00000012, 0x00000022, 0x0000002e,
	0x00000041, 0x00000056, 0x00000070, 0x0000008b,
	0x0000009b, 0x000000ad, 0x000000bc, 0x000000d2,
	0x000000e7, 0x000000fd, 0x00000110, 0x00000122,
	0x00000136, 0x00000149, 0x00000157, 0x0000016d,
	0x0000017e, 0x00000191, 0x0000019e, 0x000001aa,
	0x000001be, 0x000001d6, 0x000001f6, 0x00000234,
	0x0000024b, 0x0000025f, 0x0000026f, 0x00000288,
	// Entry 20 - 3F
	0x00000292,
} // Size: 156 bytes

const en_USData string = "" + // Size: 658 bytes
	"\x02No data to update\x02duplicate entry\x02empty query\x02empty primary" +
	" keys\x02unexpected row count\x02input needs pointer input\x02input need" +
	"s slice or array\x02read only input\x02NotSupportedError\x02TableNotExis" +
	"ts\x02fail to insert object\x02not a valid JSONDict\x02not a valid JSONA" +
	"rray\x02not a valid number\x02not a valid float\x02not a valid boolean" +
	"\x02not a valid string\x02key not found\x02unsupported operation\x02out " +
	"of key range\x02out of index range\x02invalid char\x02invalid hex\x02inv" +
	"alid 4 byte rune\x02unmarshal type mismatch\x02unmarshal array length mi" +
	"smatch\x02do not known how to deserialize json into this interface type" +
	"\x02map key must be string\x02missing input field\x02nil input field\x02" +
	"Cannot find JSONDict key\x02Illformat"

var zh_CNIndex = []uint32{ // 33 elements
	// Entry 0 - 1F
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	// Entry 20 - 3F
	0x00000000,
} // Size: 156 bytes

const zh_CNData string = ""

// Total table size 970 bytes (0KiB); checksum: A9D0BAAE
